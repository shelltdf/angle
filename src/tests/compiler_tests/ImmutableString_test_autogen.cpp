// GENERATED FILE - DO NOT EDIT.
// Generated by gen_builtin_symbols.py using data from builtin_function_declarations.txt.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// ImmutableString_test_autogen.cpp:
//   Tests for matching script-generated hashes with runtime computed hashes.

#include "compiler/translator/ImmutableString.h"
#include "gtest/gtest.h"

namespace sh
{

TEST(ImmutableStringTest, ScriptGeneratedHashesMatch)
{
    ASSERT_EQ(0xa30cdef4u, ImmutableString("frexp").hash32());
    ASSERT_EQ(0x8c63f160u, ImmutableString("ldexp").hash32());
    ASSERT_EQ(0xae0f4e53u, ImmutableString("packUnorm4x8").hash32());
    ASSERT_EQ(0x4d4a19b5u, ImmutableString("packSnorm4x8").hash32());
    ASSERT_EQ(0x33b8cbf8u, ImmutableString("unpackUnorm4x8").hash32());
    ASSERT_EQ(0x7c07f1eeu, ImmutableString("unpackSnorm4x8").hash32());
    ASSERT_EQ(0xf50788fdu, ImmutableString("bitfieldExtract").hash32());
    ASSERT_EQ(0xf81301b9u, ImmutableString("bitfieldInsert").hash32());
    ASSERT_EQ(0xe5c5029au, ImmutableString("bitfieldReverse").hash32());
    ASSERT_EQ(0x2568837fu, ImmutableString("bitCount").hash32());
    ASSERT_EQ(0x310cbdf3u, ImmutableString("findLSB").hash32());
    ASSERT_EQ(0x7ba9e270u, ImmutableString("findMSB").hash32());
    ASSERT_EQ(0xca0f40eeu, ImmutableString("uaddCarry").hash32());
    ASSERT_EQ(0xb82cbfe3u, ImmutableString("usubBorrow").hash32());
    ASSERT_EQ(0xebfef903u, ImmutableString("umulExtended").hash32());
    ASSERT_EQ(0x55fde64fu, ImmutableString("imulExtended").hash32());
    ASSERT_EQ(0x44a612d1u, ImmutableString("texelFetch").hash32());
    ASSERT_EQ(0xa3a03233u, ImmutableString("textureGather").hash32());
    ASSERT_EQ(0xb24338c0u, ImmutableString("textureGatherOffset").hash32());
    ASSERT_EQ(0xc1e02fa4u, ImmutableString("atomicCounter").hash32());
    ASSERT_EQ(0x666490f9u, ImmutableString("atomicCounterIncrement").hash32());
    ASSERT_EQ(0xd651bc5du, ImmutableString("atomicCounterDecrement").hash32());
    ASSERT_EQ(0x26813a3u, ImmutableString("atomicAdd").hash32());
    ASSERT_EQ(0x23647d3cu, ImmutableString("atomicMin").hash32());
    ASSERT_EQ(0x1150d92eu, ImmutableString("atomicMax").hash32());
    ASSERT_EQ(0xe676f219u, ImmutableString("atomicAnd").hash32());
    ASSERT_EQ(0xd2b1c53du, ImmutableString("atomicOr").hash32());
    ASSERT_EQ(0xbfd854b5u, ImmutableString("atomicXor").hash32());
    ASSERT_EQ(0xb94d85ddu, ImmutableString("atomicExchange").hash32());
    ASSERT_EQ(0xf3bd9210u, ImmutableString("atomicCompSwap").hash32());
    ASSERT_EQ(0x6ef2b1c3u, ImmutableString("imageSize").hash32());
    ASSERT_EQ(0x493c8c52u, ImmutableString("imageLoad").hash32());
    ASSERT_EQ(0x4f0e8e9bu, ImmutableString("imageStore").hash32());
    ASSERT_EQ(0x3815d075u, ImmutableString("memoryBarrier").hash32());
    ASSERT_EQ(0xb5e7ff54u, ImmutableString("memoryBarrierAtomicCounter").hash32());
    ASSERT_EQ(0x6fdf21cbu, ImmutableString("memoryBarrierBuffer").hash32());
    ASSERT_EQ(0x4dafa4aau, ImmutableString("memoryBarrierImage").hash32());
    ASSERT_EQ(0x3d693fa0u, ImmutableString("barrier").hash32());
    ASSERT_EQ(0xe85fa9e4u, ImmutableString("memoryBarrierShared").hash32());
    ASSERT_EQ(0x7afaf16eu, ImmutableString("groupMemoryBarrier").hash32());
    ASSERT_EQ(0xb5d34358u, ImmutableString("EmitVertex").hash32());
    ASSERT_EQ(0xb413b257u, ImmutableString("EndPrimitive").hash32());
    ASSERT_EQ(0x10d2583fu, ImmutableString("sinh").hash32());
    ASSERT_EQ(0xf45c461cu, ImmutableString("cosh").hash32());
    ASSERT_EQ(0x92855d0u, ImmutableString("tanh").hash32());
    ASSERT_EQ(0xbab19e4au, ImmutableString("asinh").hash32());
    ASSERT_EQ(0xedf2c855u, ImmutableString("acosh").hash32());
    ASSERT_EQ(0x7275075u, ImmutableString("atanh").hash32());
    ASSERT_EQ(0x2a48023bu, ImmutableString("abs").hash32());
    ASSERT_EQ(0xcbc8ba4u, ImmutableString("sign").hash32());
    ASSERT_EQ(0xd55e61e5u, ImmutableString("trunc").hash32());
    ASSERT_EQ(0x4f0be23bu, ImmutableString("round").hash32());
    ASSERT_EQ(0xa4639127u, ImmutableString("roundEven").hash32());
    ASSERT_EQ(0xc98f4557u, ImmutableString("min").hash32());
    ASSERT_EQ(0xd7a2e319u, ImmutableString("max").hash32());
    ASSERT_EQ(0xa82efcbcu, ImmutableString("clamp").hash32());
    ASSERT_EQ(0xd78f5b61u, ImmutableString("mix").hash32());
    ASSERT_EQ(0xeb6ede7fu, ImmutableString("modf").hash32());
    ASSERT_EQ(0xb1b3c06au, ImmutableString("isnan").hash32());
    ASSERT_EQ(0x26ac11d8u, ImmutableString("isinf").hash32());
    ASSERT_EQ(0xb15a3cc9u, ImmutableString("floatBitsToInt").hash32());
    ASSERT_EQ(0xc8575388u, ImmutableString("floatBitsToUint").hash32());
    ASSERT_EQ(0xfc501e17u, ImmutableString("intBitsToFloat").hash32());
    ASSERT_EQ(0xc29ffa7eu, ImmutableString("uintBitsToFloat").hash32());
    ASSERT_EQ(0x4326f80au, ImmutableString("packSnorm2x16").hash32());
    ASSERT_EQ(0x6ff78d04u, ImmutableString("packUnorm2x16").hash32());
    ASSERT_EQ(0x5bd36438u, ImmutableString("packHalf2x16").hash32());
    ASSERT_EQ(0x6e02ba1bu, ImmutableString("unpackSnorm2x16").hash32());
    ASSERT_EQ(0x25680679u, ImmutableString("unpackUnorm2x16").hash32());
    ASSERT_EQ(0x28cedbc3u, ImmutableString("unpackHalf2x16").hash32());
    ASSERT_EQ(0xd5f05125u, ImmutableString("matrixCompMult").hash32());
    ASSERT_EQ(0x8f8617abu, ImmutableString("outerProduct").hash32());
    ASSERT_EQ(0xc03183c0u, ImmutableString("transpose").hash32());
    ASSERT_EQ(0x767e36c0u, ImmutableString("determinant").hash32());
    ASSERT_EQ(0xb201f283u, ImmutableString("inverse").hash32());
    ASSERT_EQ(0x5fc75c3u, ImmutableString("lessThan").hash32());
    ASSERT_EQ(0x491f109u, ImmutableString("lessThanEqual").hash32());
    ASSERT_EQ(0x4644cdeu, ImmutableString("greaterThan").hash32());
    ASSERT_EQ(0xed7dc722u, ImmutableString("greaterThanEqual").hash32());
    ASSERT_EQ(0x2f7508efu, ImmutableString("equal").hash32());
    ASSERT_EQ(0x2485bbbeu, ImmutableString("notEqual").hash32());
    ASSERT_EQ(0x3c6468f4u, ImmutableString("texture").hash32());
    ASSERT_EQ(0x94b08f7fu, ImmutableString("textureProj").hash32());
    ASSERT_EQ(0x23feff3u, ImmutableString("textureLod").hash32());
    ASSERT_EQ(0xc73e788du, ImmutableString("textureSize").hash32());
    ASSERT_EQ(0xb755b482u, ImmutableString("textureProjLod").hash32());
    ASSERT_EQ(0x33a56e6cu, ImmutableString("textureGrad").hash32());
    ASSERT_EQ(0x7bf8de3bu, ImmutableString("textureProjGrad").hash32());
    ASSERT_EQ(0x88c917cfu, ImmutableString("textureOffset").hash32());
    ASSERT_EQ(0xa5212424u, ImmutableString("textureProjOffset").hash32());
    ASSERT_EQ(0x39d34980u, ImmutableString("textureLodOffset").hash32());
    ASSERT_EQ(0x1535b7a5u, ImmutableString("textureProjLodOffset").hash32());
    ASSERT_EQ(0x12b2640eu, ImmutableString("texelFetchOffset").hash32());
    ASSERT_EQ(0x6b0ca057u, ImmutableString("textureGradOffset").hash32());
    ASSERT_EQ(0x8b45ed38u, ImmutableString("textureProjGradOffset").hash32());
    ASSERT_EQ(0xa6789406u, ImmutableString("rgb_2_yuv").hash32());
    ASSERT_EQ(0xc7818fa2u, ImmutableString("yuv_2_rgb").hash32());
    ASSERT_EQ(0xc8859a8bu, ImmutableString("dFdx").hash32());
    ASSERT_EQ(0xc78598f8u, ImmutableString("dFdy").hash32());
    ASSERT_EQ(0x4b6e55d3u, ImmutableString("fwidth").hash32());
    ASSERT_EQ(0x18a9c042u, ImmutableString("texture2D").hash32());
    ASSERT_EQ(0xc7cb8969u, ImmutableString("texture2DProj").hash32());
    ASSERT_EQ(0xfece2a39u, ImmutableString("textureCube").hash32());
    ASSERT_EQ(0x3d4abf10u, ImmutableString("texture2DRect").hash32());
    ASSERT_EQ(0x6dc0e8e3u, ImmutableString("texture2DRectProj").hash32());
    ASSERT_EQ(0xd1836639u, ImmutableString("texture2DGradEXT").hash32());
    ASSERT_EQ(0x4040698cu, ImmutableString("texture2DProjGradEXT").hash32());
    ASSERT_EQ(0x1d18f29cu, ImmutableString("textureCubeGradEXT").hash32());
    ASSERT_EQ(0x7150ceb8u, ImmutableString("texture2DLodEXT").hash32());
    ASSERT_EQ(0xbacaedf7u, ImmutableString("texture2DProjLodEXT").hash32());
    ASSERT_EQ(0x7309b987u, ImmutableString("textureCubeLodEXT").hash32());
    ASSERT_EQ(0xfa79f401u, ImmutableString("texture2DLod").hash32());
    ASSERT_EQ(0x30ed9cfcu, ImmutableString("texture2DProjLod").hash32());
    ASSERT_EQ(0xb35e342cu, ImmutableString("textureCubeLod").hash32());
    ASSERT_EQ(0x856a57e1u, ImmutableString("radians").hash32());
    ASSERT_EQ(0xaf5442eeu, ImmutableString("degrees").hash32());
    ASSERT_EQ(0xe0302a4du, ImmutableString("sin").hash32());
    ASSERT_EQ(0xfb8de29cu, ImmutableString("cos").hash32());
    ASSERT_EQ(0x9cf73498u, ImmutableString("tan").hash32());
    ASSERT_EQ(0xfeae7ea6u, ImmutableString("asin").hash32());
    ASSERT_EQ(0x3c01df1fu, ImmutableString("acos").hash32());
    ASSERT_EQ(0x678cabfu, ImmutableString("atan").hash32());
    ASSERT_EQ(0x58336ad5u, ImmutableString("pow").hash32());
    ASSERT_EQ(0x72a68728u, ImmutableString("exp").hash32());
    ASSERT_EQ(0x3f515151u, ImmutableString("log").hash32());
    ASSERT_EQ(0x9626adeeu, ImmutableString("exp2").hash32());
    ASSERT_EQ(0x10031ed9u, ImmutableString("log2").hash32());
    ASSERT_EQ(0x7dee3bcfu, ImmutableString("sqrt").hash32());
    ASSERT_EQ(0xe8b548a5u, ImmutableString("inversesqrt").hash32());
    ASSERT_EQ(0xb8e70c1du, ImmutableString("floor").hash32());
    ASSERT_EQ(0x62e4e208u, ImmutableString("ceil").hash32());
    ASSERT_EQ(0xeef29a67u, ImmutableString("fract").hash32());
    ASSERT_EQ(0xdf9e7283u, ImmutableString("mod").hash32());
    ASSERT_EQ(0xc7441a0fu, ImmutableString("step").hash32());
    ASSERT_EQ(0x95964e7du, ImmutableString("smoothstep").hash32());
    ASSERT_EQ(0x83d03615u, ImmutableString("length").hash32());
    ASSERT_EQ(0x2eb31462u, ImmutableString("distance").hash32());
    ASSERT_EQ(0xd3689f20u, ImmutableString("dot").hash32());
    ASSERT_EQ(0x29f5189bu, ImmutableString("cross").hash32());
    ASSERT_EQ(0xce79296cu, ImmutableString("normalize").hash32());
    ASSERT_EQ(0x5fd55fe1u, ImmutableString("faceforward").hash32());
    ASSERT_EQ(0x92c778aau, ImmutableString("reflect").hash32());
    ASSERT_EQ(0x66c705cu, ImmutableString("refract").hash32());
    ASSERT_EQ(0x2c29f04du, ImmutableString("any").hash32());
    ASSERT_EQ(0x13254bc4u, ImmutableString("all").hash32());
    ASSERT_EQ(0x29b19c8au, ImmutableString("not").hash32());
}

}  // namespace sh
